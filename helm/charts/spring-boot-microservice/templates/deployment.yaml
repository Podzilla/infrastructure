apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "spring-boot-microservice.fullname" . }}
  labels:
    {{- include "spring-boot-microservice.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "spring-boot-microservice.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "spring-boot-microservice.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.podSecurityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- if .Values.command }}
          command: {{- toYaml .Values.command | nindent 12 }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - containerPort: {{ .Values.service.port | default 8080 }}
          env:
            {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.secretName }}
          envFrom:
            - secretRef:
                name: {{ .Values.secretName }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if eq .Values.serviceName "psql" }}
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 300
            periodSeconds: 10
          {{- else }}
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .Values.service.port | default 8080 }}
            initialDelaySeconds: 300
            periodSeconds: 10
          {{- end }}
          {{- if eq .Values.serviceName "psql" }}
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 300
            periodSeconds: 5
          {{- else }}
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .Values.service.port | default 8080 }}
            initialDelaySeconds: 300
            periodSeconds: 5
          {{- end }}
          {{- if .Values.logVolume.enabled }}
          volumeMounts:
            - name: log-volume
              mountPath: /logs
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          {{ toYaml .Values.extraVolumeMounts | nindent 12 }}
          {{- end }}
      {{- if .Values.logVolume.enabled }}
      volumes:
        - name: log-volume
          persistentVolumeClaim:
            claimName: {{ include "spring-boot-microservice.fullname" . }}-log-pvc
      {{- end }}
      {{- if .Values.extraVolumes }}
      {{ toYaml .Values.extraVolumes | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
